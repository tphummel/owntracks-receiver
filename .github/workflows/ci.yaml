name: Go

on:
  push:
    branches:
      - "*"
  workflow_dispatch:
    inputs:
      rollback_version:
        description: 'Rollback to this version'
        required: false

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: ^1.20
    - name: Check out code
      uses: actions/checkout@v3
    - name: Test
      run: go test -v ./...

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: ^1.20
    - name: Check out code
      uses: actions/checkout@v3
    - name: Build
      run: go build -v -o my-binary
    - name: Upload binary
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: my-binary
        path: my-binary

  release:
    runs-on: ubuntu-latest
    needs: [build, test]
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Download binary
      uses: actions/download-artifact@v3
      with:
        name: my-binary
        path: .
    - name: Set the current date and short Git SHA
      id: date-and-sha
      run: |
        echo "current_date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "short_sha=$(echo ${GITHUB_SHA} | cut -c1-5)" >> $GITHUB_OUTPUT
    - name: Create tag
      run: |
        TAG="${{ steps.date-and-sha.outputs.current_date }}-${{ steps.date-and-sha.outputs.short_sha }}"
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git remote set-url origin "https://${GITHUB_ACTOR}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
        git tag $TAG
        git push origin $TAG
    - name: Create Release
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/github-script@v6
      with:
        script: |
          const repo = context.repo;
          const tagName = `${{ steps.date-and-sha.outputs.current_date }}-${{ steps.date-and-sha.outputs.short_sha }}`;

          const release = await github.rest.repos.createRelease({
            ...repo,
            tag_name: tagName,
            name: `Release ${tagName}`,
            body: 'Description of the release',
            draft: false,
            prerelease: false,
          });

          core.setOutput('release_id', release.data.id);
    - name: Upload Release Asset
      if: steps.create_release.outputs.release_id != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const mime = require('mime');
          const repo = context.repo;
          const assetName = 'my-binary';
          const assetPath = './my-binary';

          const releaseId = core.getInput('release_id');
          const contentType = mime.getType(assetPath) || 'application/octet-stream';

          const fileContent = fs.readFileSync(assetPath);

          const { data: asset } = await github.rest.repos.uploadReleaseAsset({
            ...repo,
            release_id: releaseId,
            name: assetName,
            content_type: contentType,
            data: fileContent,
          });

          core.setOutput('asset_id', asset.id);
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: release
  #   if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && github.ref == 'never-run/skipping-for-now'
  #   steps:
  #   - name: Check out code
  #     uses: actions/checkout@v3
  #   - name: Set up Python
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
  #   - name: Install Ansible and Ansistrano
  #     run: pip install ansible ansistrano-deploy ansistrano-rollback
  #   - name: Set up SSH key
  #     run: echo "${{ secrets.SSH_PRIVATE_KEY }}" > id_rsa && chmod 600 id_rsa
  #     env:
  #       SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  #   - name: Deploy with Ansistrano
  #     run: |
  #       export ANSIBLE_HOST_KEY_CHECKING=False
  #       export ANSIBLE_PYTHON_INTERPRETER=/usr/bin/python3
  #       export ROLLBACK_VERSION=${{ github.event.inputs.rollback_version }}

  #       if [ -z "$ROLLBACK_VERSION" ]; then
  #         echo "Performing normal deploy"
  #         ansible-playbook -i 'anytracks.lab.tomhummel.com,' ansible/deploy.yml --private-key id_rsa
  #       else
  #         echo "Performing rollback to version $ROLLBACK_VERSION"
  #         ansible-playbook -i 'anytracks.lab.tomhummel.com,' ansible/rollback.yml --private-key id_rsa --extra-vars "rollback_version=$ROLLBACK_VERSION"
  #       fi

